generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Ranks {
  F
  D
  C
  B
  A
  S
  SH
  SS
  X
}

model Badge {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(references: [id], fields: [eventId])
  eventId   Int
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("badges")
  @@index([eventId])
}

model Event {
  id               Int          @id @default(autoincrement())
  eventType        String
  name             String
  teamSize         Int?
  playingTeamSize  Int?
  lowerRankLimit   Int?          
  upperRankLimit   Int?          
  bracketType      String?      
  qualifierType    String?
  startTime        DateTime?
  isStarted        Boolean?      @default(false)
  finishTime       DateTime?     
  organisation     Organisation @relation(fields: [organisationId], references: [id])
  organisationId   Int
  game             Game         @relation(fields: [gameId], references: [id])
  gameId           Int
  participants     Team[]
  staff            User[]
  badges           Badge[]
  rounds           Round[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("events")
  @@index([gameId])
  @@index([organisationId])
}

model Game {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  events    Event[]
  ratings   Rating[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("games")
}

model Map {
  id           Int      @id @default(autoincrement())
  osuBeatmapId Int      @unique
  title        String
  artist       String
  mapper       String
  cover        String?
  ar           Float
  cs           Float
  od           Float
  hp           Float
  bpm          Float
  length       String   @db.VarChar(5)
  rounds       Round[]
  scores       Score[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("maps")
}

model Match {
  id         Int      @id @default(autoincrement())
  isFinished Boolean  @default(false) @map("is_finished")
  teams      Team[]
  scores     Score[]
  rounds     Round    @relation(fields: [roundId], references: [id])
  roundId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("matches")
  @@index([roundId])
}

model Organisation {
  id        Int      @id @default(autoincrement())
  name      String
  members   User[]
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organisations")
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
  @@index([gameId])
  @@index([userId])
}

model Round {
  id        Int      @id @default(autoincrement())
  name      String
  maps      Map[]
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  matches   Match[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rounds")
  @@index([eventId])
}

model Score {
  id        Int      @id @default(autoincrement())
  points    Int
  accuracy  Float
  rank      Ranks
  mods      Int
  time      DateTime
  map       Map      @relation(fields: [mapId], references: [id])
  mapId     Int
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scores")
  @@index([mapId])
  @@index([matchId])
  @@index([userId])
}
 
model StaffRole {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff_roles")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  members   User[]
  matches   Match[]
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique @db.VarChar(20)
  firebaseId    String         @unique @map("firebase_id")
  timezone      String
  osuId         Int?           @map("osu_id")
  discordId     String?        @map("discord_id")
  userRoles     UserRole[]
  staffRoles    StaffRole[]
  teams         Team[]
  organisations Organisation[]
  events        Event[]
  ratings       Rating[]
  badges        Badge[]
  scores        Score[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_roles")
}
